#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
#entre 1 y el n√∫mero que indique el usuario
#Funci√≥n recursiva que calcule el factorial de un n√∫mero
def factorial(n):
    # Caso base: si n es 0  su factorial es 1
    if n == 0:
        return 1
    # Llamada recursiva
    else:
        return n * factorial(n - 1)
    
#Pedir n√∫mero al usuario
ultimo_factorial=int(input("Ingrese un n√∫mero entero positivo:"))

# calcular  factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
#Recorre los n√∫meros desde 1 hasta el n√∫mero ingresado (inclusive).
for i in range(1, ultimo_factorial + 1): 
#Llama a la funci√≥n factorial(i) para calcular el factorial de ese n√∫mero.
    print(f"{i}! = {factorial(i)}")           

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci_recursivo(posicion):
#Cuando la posici√≥n es 0 o 1, se devuelve ese mismo n√∫mero.Primeros dos t√©rminos de la secuencia.
    if posicion==0:
        return 0
    elif posicion ==1:
        return 1
    else:
#Llamada recursiva.Para cualquier posici√≥n ‚â• 2, se calcula
        return fibonacci_recursivo(posicion-1)+ fibonacci_recursivo(posicion-2)

#Muestra la serie completa hasta la posici√≥n que el usuario especifique. 
#Solicitar posicion

Ultima_posicion=int(input("Ingrese un n√∫mero entero positivo:"))

for i in range (Ultima_posicion):
    print(f"En la posicion {i} obtenemos el valor de fibonacci:{fibonacci_recursivo(i)}")


#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1)
#. Prueba esta funci√≥n en un algoritmo general.

#Funcion recursiva que calcula la potencia parametros base y el expnente

def potencia_recursiva(base, exponente):
#si el exponente es 1 el resultado es 0, esta es la condicion base de la funcion 
    if exponente==0:
        return 1
#Si el exponente no es 0 devolvemos la recursion la funcion se llama a s√≠ misma con el exponente reducido en 1y multiplica la base por ese resultado
    else:
        return base * potencia_recursiva(base, exponente-1)
    
#. Prueba esta funci√≥n en un algoritmo general. 
# Solicitar los valores al usuario
base = int(input("Ingres√° la base (n√∫mero entero): "))
exponente = int(input("Ingres√° el exponente (entero positivo): "))

if exponente<0:
    print("Solo se permite el ingreso de exponente positivo.")
else:
    resultado=potencia_recursiva(base,exponente)
    print(f"{base}^{exponente}= {resultado}")



#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
#decimal y devuelva su representaci√≥n en binario como una cadena de texto.

#Funcion recursiva
def decimal_binario(decimal):
#caso base 
    if decimal == 0:
        return "0"
    elif decimal== 1:
        return "1"
#llamada recursiva
    else:
#La funci√≥n se llama a s√≠ misma con ndecimal // 2, hasta llegar a 1 o 0
        return decimal_binario(decimal//2)+str(decimal%2)  
        

binario= decimal_binario(5)
print(binario)

print(5%2)


#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
#Requisitos:La soluci√≥n debe ser recursiva. No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    if len(palabra)<=1:            #caso base si la palabra tiene 
        return True
#Si la primera y la ultima letra son diferentes no es palindromo
    elif palabra[0]!=palabra[-1]:
        return False
    else:
#Llamada recursiva sin la primera y la ultima letra
        return es_palindromo(palabra[1:-1])

palabra=input("Escriba palabra sin espacios ni tildes para verificar si es palidromo:")

palindromo=(es_palindromo(palabra))

if palindromo == True:
    print("La palabra ingresa es un palindromo")
else:
    print("La palabra ingresada no es un palidromo ")
#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
 #Restricciones:#No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.Ejemplos:suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)suma_digitos(9) ‚Üí 9suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

#Funcion recursiva 

def suma_digitos(n):
    if n <10 :#caso base si es un solo digito lo devuelvo 
        return n
    else:
        return (n%10)+ suma_digitos(n//10)# obtiene el √∫ltimo d√≠gito del n√∫mero y lo elimina con la division entera



n=int(input("Ingrese n√∫mero entero positivo:"))


print(f"La suma de los digitos de {n} es de : {suma_digitos(n)}")


#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
#√∫ltimo nivel con un solo bloque.Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que 
# necesita para construir toda la pir√°mide. Ejemplos:
#contar_bloques(1) ‚Üí 1 (1)
#contar_bloques(2) ‚Üí 3 (2 + 1)
#contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)


def contar_bloques(n):
    if n == 1:          # caso base: si queda un solo nivel, se necesita 1 bloque
        return 1
    else:
        return n + contar_bloques(n 